{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","category","type","placeholder","onChange","target","getGifs","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAMK,OAAOC,OAAQ,IACpBR,GAAc,SAAAS,GAAQ,OAAIP,GAAJ,mBAAaO,OACnCN,EAZa,MAiBjB,UACE,gDACA,uBACEO,KAAK,OACLR,MAAOA,EACPS,YArBY,oBAsBZC,SAnBa,SAACP,GAClBF,EAASE,EAAEQ,OAAOX,c,+BCVbY,EAAO,uCAAG,WAAQL,GAAR,uBAAAM,EAAA,6DACbC,EADa,0FAC6EC,UAAUR,GADvF,sBAEKS,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAEzB,MAAM,CACFC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAClC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAiB,IAAfxB,EAAc,EAAdA,SAItB,ECNwB,SAACA,GACzB,MAA0BR,mBAAS,CAC/BoB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OATAC,qBAAU,WACNvB,EAAQL,GACH6B,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGtB,CAACzB,IACG0B,EDVyBK,CAAa/B,GAAjCkB,EAAZ,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SACKrB,IAEJyB,GAAW,mBAAGJ,UAAU,oCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAC,GACR,OAAO,cAAC,EAAD,eAA+BA,GAAZA,EAAIC,aEenCgB,EA5BM,WACjB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAQA,OAAO,qCACC,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ0C,EAAWnB,KAAI,SAAAd,GACX,OAAO,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,Y,MCtB7CkC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b7e45987.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const defaultValue = \"\";\r\n    const placeholder = \"Ingresa una frase\";\r\n    const [value, setValue] = useState(\"\")\r\n\r\n    const handleChange = (e) => {        \r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(value.trim().length >2){\r\n            setCategories(category=> [value,...category,]);\r\n            setValue(defaultValue);\r\n        }\r\n        \r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2> Add Category </h2>  \r\n          <input\r\n            type=\"text\"\r\n            value={value}\r\n            placeholder={placeholder}\r\n            onChange={ handleChange}\r\n          ></input>\r\n        </form>\r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n};\r\n\r\n","export const getGifs = async  (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=re6QlY13BJM7QAWOdGdoOkdOboOzl5Nv&q=${ encodeURI(category) }&limit=10`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();        \r\n    const gifs = data.map(img => {\r\n        \r\n        return{\r\n            id : img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    });\r\n    \r\n\r\n    return gifs;\r\n    \r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category}) => {\r\n    \r\n      \r\n    \r\n    const {data:images , loading }= useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>\r\n                {category}\r\n            </h3>    \r\n            {loading && <p className='animate__animated animate__fadeIn'>Loading...</p>}\r\n            <div className='card-grid'>                                          \r\n                {images.map(img => {\r\n                    return <GifGridItem  key={img.id} {...img} />} \r\n                )}\r\n            </div>\r\n                \r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    \r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then( imgs =>{                \r\n                setstate({\r\n                    data:imgs,\r\n                    loading: false\r\n                })                                    \r\n            });\r\n    }, [category]);\r\n    return state;\r\n};","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    \r\n    //const handleAdd = ()=>{\r\n        //setCategories([...categories, 'HunterXHunter']);\r\n        //setCategories( categories.concat('Bob Esponja'));\r\n\r\n        //setCategories(cats => [...cats, 'Bob Esponja']);\r\n    //};  \r\n    return(<>\r\n            <h2>\r\n                GifExpertApp \r\n            </h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            \r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => {\r\n                        return <GifGrid key={category} category={ category }/>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>);\r\n};\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css'\nReactDOM.render(  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}